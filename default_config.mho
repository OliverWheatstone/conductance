// Default conductance configuration

var assert = require('sjs:assert');
var logging = require('sjs:logging');
var server = require('mho:server');

//----------------------------------------------------------------------
// function invoked by `conductance serve`
exports.serve = function(args) {
  var parser = require('sjs:dashdash').createParser({
    options: [
      {
        name: 'cors',
        type: 'bool',
        help: 'enable CORS',
        'default': false,
      },
      {
        names: ['help', 'h'],
        type: 'bool',
      },
      {
        names: ['production'],
        type: 'bool',
        help: 'disable development mode features',
        'default': process.env['NODE_ENV'] === 'production',
      },
      {
        names: ['host'],
        type: 'string',
        help: 'serve on address (default: "localhost". Use "any" to serve on any address")',
        'default': 'localhost',
      },
      {
        names: ['port'],
        type: 'number',
        help: 'serve on port (default: "7075")',
        'default': 7075,
      },
      {
        names: ['ssl'],
        type: 'bool',
        help: 'serve over https (NOTE: uses the default conductance certificate, use for testing only)',
        'default': 7075,
      },
    ]
  });
  try {
    var opts = parser.parse(args);
  } catch(e) {
    console.error('Error: ', e.message);
    process.exit(1);
  }

  if (opts.help) {
    console.log("  default_config.mho options:\n");
    console.log(parser.help({includeEnv:true}));
    process.exit(0);
  }

  var { readFile } = require('sjs:nodejs/fs');
  var { conductanceRoot } = require('mho:server/env');
  var { Port } = server;
  var { SystemRoutes, ExecutableDirectory, LogRequests, DeveloperMode } = require('mho:server/routes');


  var routes = [
        SystemRoutes(),
        ExecutableDirectory(process.cwd()),
      ] .. LogRequests(logging.INFO);

  if (!opts.production) {
    routes = routes .. DeveloperMode();
  }


  var host = opts.host == 'any' ? null : opts.host;
  var port = opts.port;
  var ssl = opts.ssl;

  var address = Port(port, host);
  if (opts.ssl) {
    address = address.ssl({
      key: readFile("#{conductanceRoot}ssl/insecure-localhost.key"),
      cert: readFile("#{conductanceRoot}ssl/insecure-localhost.crt")
    });
  }

  server.run({
    address: address,
    routes: routes,
  });
};

exports.systemd = function() {
  var systemd = require('mho:server/systemd');
  var url = require('sjs:url');
  return {
    master: {
      Service: {
        Restart: 'always',
        User: 'conductance',
        Group: 'conductance',
        Environment: {'NODE_ENV': 'production'},
        ExecStart: systemd.ConductanceArgs.concat('run', module.id .. url.toPath),
      },
      // use socket activation
      Socket: {
        Listen: ports,
      },
    }
  }
};
