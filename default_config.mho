// Default conductance configuration

@ = require('mho:std');

var server = require('mho:server');

//----------------------------------------------------------------------
// function invoked by `conductance serve`
exports.serve = function(args) {
  var parser = require('sjs:dashdash').createParser({
    options: [
      {
        name: 'cors',
        type: 'bool',
        help: 'enable CORS',
        'default': false,
      },
      {
        names: ['help', 'h'],
        type: 'bool',
      },
      {
        names: ['host'],
        type: 'string',
        help: 'serve on address (default: "localhost". Use "any" to serve on any address")',
        'default': 'localhost',
      },
      {
        names: ['port'],
        type: 'number',
        help: 'serve on port (default: 7075)',
        'default': 7075,
      },
      {
        names: ['ssl'],
        type: 'bool',
        help: 'serve over https (NOTE: uses the default conductance certificate, use for testing only)',
        'default': false,
      },
    ]
  });
  try {
    var opts = parser.parse(args);
  } catch(e) {
    console.error('Error: ', e.message);
    process.exit(1);
  }

  if (opts.help) {
    console.log("  default_config.mho options:\n");
    console.log(parser.help({includeEnv:true}));
    process.exit(0);
  }

  var routes = [
        @route.SystemRoutes(),
        @route.ExecutableDirectory('__doc', @env.conductanceRoot + '/doc'),
        @route.ExecutableDirectory(process.cwd()),
      ] .. @route.LogRequests(@logging.INFO);

  if (process.env.NODE_ENV !== 'production') {
    // show stacktraces
    routes = routes .. @route.DeveloperMode();
  }

  var host = opts.host == 'any' ? null : opts.host;
  var port = opts.port;
  var ssl = opts.ssl;

  var address = @Port(port, host);
  if (opts.ssl) {
    address = address.ssl({
      key: @fs.readFile("#{@env.conductanceRoot}ssl/insecure-localhost.key"),
      cert: @fs.readFile("#{@env.conductanceRoot}ssl/insecure-localhost.crt")
    });
  }

  if (opts.cors) {
    routes = routes .. @route.AllowCORS;
  };

  @server.run({
    address: address,
    routes: routes,
  });
};
