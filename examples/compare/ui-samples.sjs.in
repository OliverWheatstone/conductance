# Data binding (observable obejcts)

```
var name = @Observable("<anonymous>");

container .. @appendWidget(`
  <p>You are: ${@TextInput(name)}</p>
  <p>(Hello, $name)</p>
`);
```

# Building a reactive UI using observables

```
var todoItems = @ObservableArray([
  "Pick up milk",
  "Do some coding",
]);

// create a delete button bound to a task
function deleteButton(task) {
  return @Button("x") .. @Mechanism(function(elem) {
    elem .. @wait('click');
    todoItems .. @remove(task);
  });
};

// combine each item text with delete button
var itemDisplay = @UnorderedList(
  todoItems .. @Map(
    task -> `$deleteButton(task) $task`
  ));

// derive item length from the `todoItems` array:
var itemCount = @Computed(todoItems, function(items) {
  var len = items.length;
  return `$len thing${len != 1 ? 's'}`;
});

// input area for adding new items:
var newItem = @Input() .. @Mechanism(function(elem) {
  elem .. @when('keypress') {|ev|
    if (ev.which !== 13) continue;
    todoItems.push(elem.value);
    elem.value = '';
  }
});

container .. @appendWidget(`
  <h1>Todo List:</h1>
  <p>($itemCount to do...)
  $itemDisplay
  <br/>
  <p>Add more: $newItem</p>
`);
```

