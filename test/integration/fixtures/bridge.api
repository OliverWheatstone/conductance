var { integers } = require('sjs:sequence');
var { setStatus } = require('mho:server/response');
var logging = require('sjs:logging');
var { Observable } = require('mho:observable');

exports.throwError = function(msg) { throw new Error(msg); }

exports.callme = function(f) { return f(); }

var transport = function() {
  if (!exports._transport)
    throw new Error("Test harness error: exports._transport not set by server config");
  return exports._transport;
}

var pollRequest = function() {
  if (!exports._poll_request)
    throw new Error("Test harness error: exports._poll_request not set by server config");
  return exports._poll_request;
}

exports.destroyConnection = function(timeout) {
  var t = transport();
  spawn(function() {
    hold(timeout);
    logging.info("bridge.api: destroying connection");
    t.__finally__();
  }());
}

exports.breakConnection = function(timeout) {
  spawn(function() {
    hold(timeout);
    logging.info("bridge.api: breaking connection");
    pollRequest() .. setStatus(500);
    pollRequest().response.end("this request intentionally left broken");
  }());
}

var sharedVariable;
exports.withSharedVariable = function(block) {
  try {
    sharedVariable = Observable();
    block(sharedVariable);
  } finally {
    sharedVariable = null;
  }
};
exports.sharedVariable = -> sharedVariable;
exports.integers = integers;

exports.ping = -> "pong";
exports.hostenv = -> require('sjs:sys').hostenv;
