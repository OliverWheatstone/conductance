#!/usr/bin/env conductance

var { SystemRoutes,
      ExecutableDirectory,
    } = require('mho:server/routes');
var { Port, Route } = require('mho:server');
var url = require('sjs:url');

//----------------------------------------------------------------------
// Array of ports that conductance will listen on:

var apiRegistry = require('mho:server/api-registry');
var port = require('./conf/server.js').port;

var serverConfig = {
  address: Port(port),
  routes: [
    /* override bridge route to inject transport instance into server-side module */
    Route(
      /^__aat_bridge\/(2)$/,
      require('mho:rpc/aat-server').createTransportHandler(
        function(transport) {
          require('mho:rpc/bridge').accept(
            function(apiid) {
              var api = apiRegistry.getAPIbyAPIID(apiid);
              //console.log("got API ", api, "for ID ", apiid);
              api.obj._transport = transport;
              return api;
            },
            transport);
        }
      )
    ),
    SystemRoutes(),
    ExecutableDirectory(process.cwd()),
  ]
};

exports.run = function(args) {
  var helper = require('./helper');
  if (args.length == 0) {
    return require('mho:server').run(serverConfig);
  } else if (args[0] === '--karma') {
    args.shift();
    if(args[0] === 'run') {
      args.splice(1, 0, '--', 'app:test/run.html');
    } else {
      args.splice(1,0, url.normalize("./conf/karma.js", module.id) .. url.toPath);
    }
    require('nodejs:karma-sjs-adapter/karma.sjs').run(args);
    return;
  }
  var cutil = require('sjs:cutil');
  var string = require('sjs:string');
  var func = require('sjs:function');

  // integration tests expect a server to be running
  var serverRunning = false, cleanup = -> null;
  var startServer = function() {
    serverRunning = true;
    var ctx = cutil.breaking(brk -> helper.serve(serverConfig, brk));
    cleanup = ctx.resume;
  };

  var init = function(runner) {
    // inherit from runner.reporter, and amend its reporting
    // functions with hooks to start/stop server as necessary
    var reporter = runner.reporter = Object.create(runner.reporter);
    reporter.contextBegin = func.seq(reporter.contextBegin, function(ctx) {
      if (!serverRunning && ctx.module() .. string.startsWith('integration/')) {
        startServer();
      }
    });
    reporter.suiteEnd = func.seq(-> cleanup(), reporter.suiteEnd);
  }

  require('./run.html').run({
    init: init,
  });
}
